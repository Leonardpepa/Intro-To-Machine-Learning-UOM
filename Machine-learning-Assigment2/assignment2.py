# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gj_RLR1hruwzs-fI6cofotmegDc1FZh9
"""

#imports
from google.colab import auth
import gspread
from google.auth import default
import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn import utils
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def funcy_cf_plot(cf_matrix, class_names, classifier_name):
  #class names: list of the form ['a','b','b',etc]
  #keep two decimals
  group_counts = ["{0:0.0f}".format(value) for value in
                cf_matrix.flatten()]
  group_percentages = ["{0:.2%}".format(value) for value in
                      cf_matrix.flatten()/np.sum(cf_matrix)]

  labels = [f"{v1}\n{v2}\n" for v1, v2 in
            zip(group_counts,group_percentages)]

  labels = np.asarray(labels).reshape(2,2)

  ax = sns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')

  ax.set_title(f'Seaborn Confusion Matrix for {classifier_name} \n\n');
  ax.set_xlabel('\nPredicted Bussiness Health')
  ax.set_ylabel('Actual Bussiness Health ');

  ## Ticket labels - List must be in alphabetical order
  ax.xaxis.set_ticklabels(class_names)
  ax.yaxis.set_ticklabels(class_names)

  ## Display the visualization of the Confusion Matrix.
  plt.show()

#autenticating to google
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

#defining my worksheet
worksheet = gc.open('Dataset2Use_Assignment2').sheet1
#get_all_values gives a list of rows
rows = worksheet.get_all_values()
#Convert to a DataFrame 
df = pd.DataFrame(rows)

#creating columns name
df.columns =['365* ( Β.Υ / Κοστ.Πωλ )','Λειτ.Αποτ/Συν.Ενεργ. (ROA)','ΧΡΗΜ.ΔΑΠΑΝΕΣ / ΠΩΛΗΣΕΙΣ', ' ΠΡΑΓΜΑΤΙΚΗ ΡΕΥΣΤΟΤΗΤΑ :  (ΚΕ-ΑΠΟΘΕΜΑΤΑ) / Β.Υ', '(ΑΠΑΙΤ.*365) / ΠΩΛ.', 'Συν.Υποχρ/Συν.Ενεργ', 'Διάρκεια Παραμονής Αποθεμάτων', ' Λογαριθμος Προσωπικού', 'ΕΝΔΕΙΞΗ ΕΞΑΓΩΓΩΝ', 'ΕΝΔΕΙΞΗ ΕΙΣΑΓΩΓΩΝ', 'ΕΝΔΕΙΞΗ ΑΝΤΙΠΡΟΣΩΠΕΙΩΝ', 'ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)', 'ΕΤΟΣ']
df = df.iloc[1:]

df = df.replace(",", ".", regex=True)

df = df.astype({'365* ( Β.Υ / Κοστ.Πωλ )':'float','Λειτ.Αποτ/Συν.Ενεργ. (ROA)':'float','ΧΡΗΜ.ΔΑΠΑΝΕΣ / ΠΩΛΗΣΕΙΣ':'float', ' ΠΡΑΓΜΑΤΙΚΗ ΡΕΥΣΤΟΤΗΤΑ :  (ΚΕ-ΑΠΟΘΕΜΑΤΑ) / Β.Υ':'float', '(ΑΠΑΙΤ.*365) / ΠΩΛ.':'float', 'Συν.Υποχρ/Συν.Ενεργ':'float', 'Διάρκεια Παραμονής Αποθεμάτων':'float', ' Λογαριθμος Προσωπικού':'float', 'ΕΝΔΕΙΞΗ ΕΞΑΓΩΓΩΝ':'int', 'ΕΝΔΕΙΞΗ ΕΙΣΑΓΩΓΩΝ':'int', 'ΕΝΔΕΙΞΗ ΑΝΤΙΠΡΟΣΩΠΕΙΩΝ':'int', 'ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)':'int', 'ΕΤΟΣ':'int'})

df.head()

#Print number of healthy and bankrupt businesses / year
for x in range(2006, 2010):
  print("ΕΤΟΣ : ",x)
  print("Healthy : ",df[(df['ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)'] == 1) & (df['ΕΤΟΣ'] == x)]["ΕΤΟΣ"].count())
  print("Bankrupt : ",df[(df['ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)'] == 2) & (df['ΕΤΟΣ'] == x)]["ΕΤΟΣ"].count())
  print(" ")

#   2
#MIN MAX AVG / year'
for x in range(2006, 2010):
  print("Year : ", x)
  print("---------------------------------------------")
  print("MAX")
  print(df[df['ΕΤΟΣ'] == x].max())
  print(" ")

  print("MIN")
  print(df[df['ΕΤΟΣ'] == x].min())
  print(" ")

  print("AVG")
  print(df[df['ΕΤΟΣ'] == x].mean())
  print(" ")
  print("---------------------------------------------")

#   3
#Normalize data

x = df.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df = pd.DataFrame(x_scaled)

X = df.iloc[:, [True, True, True, True, True, True, True, True, True, True, True, False, True]]
Y = df.iloc[:,11]

#Split to train anf Test
print(X)
print("----------")
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.25, shuffle = 'true', random_state = 104)
print(Y_train)

#   4
print("A. Train : ")
print("Healthy : ",Y_train[(Y_train== 0)].count())
print("Bankrupt : ",Y_train[(Y_train== 1)].count())
print(" ")
print("-------------")
print("B. Test : ")
print("Healthy : ",Y_test[(Y_test== 0)].count())
print("Bankrupt : ",Y_test[(Y_test== 1)].count())

# 5

#Logistic Regression

#intiate the classifier
clf_lr = LogisticRegression()

#train the classifier
clf_lr.fit(X_train, Y_train)

#Support Vector Machines

#intiate the classifier
clf_svm = svm.SVC()

#train the classifier
clf_svm.fit(X_train, Y_train)

#Naive Bayes

#intiate the classifier
clf_gnb = GaussianNB()

#train the classifier
clf_gnb.fit(X_train, Y_train)

#KNN

#intiate the classifier
clf_neigh = KNeighborsClassifier(n_neighbors=3)

#train the classifier
clf_neigh.fit(X_train, Y_train)

#6

#train data
pred_train_lr = clf_lr.predict(X_train) 
pred_train_svm = clf_svm.predict(X_train)
pred_train_gnb = clf_gnb.predict(X_train)
pred_train_neigh = clf_neigh.predict(X_train)

#test data
pred_test_lr = clf_lr.predict(X_test) 
pred_test_svm = clf_svm.predict(X_test)
pred_test_gnb = clf_gnb.predict(X_test)
pred_test_neigh = clf_neigh.predict(X_test)

#lr
#train
cf_matrix_train_lr = confusion_matrix(Y_train, pred_train_lr)
print(cf_matrix_train_lr)

funcy_cf_plot(cf_matrix_train_lr, ['Healthy', 'Bankrupt'], "Logistic Regression Train")

#test
cf_matrix_test_lr = confusion_matrix(Y_test, pred_test_lr)
print(cf_matrix_test_lr)

funcy_cf_plot(cf_matrix_test_lr, ['Healthy', 'Bankrupt'], "Logistic Regression Test")
print("----------------------------------------------------------")

#svm
#train
cf_matrix_train_svm = confusion_matrix(Y_train, pred_train_svm)
print(cf_matrix_train_svm)

funcy_cf_plot(cf_matrix_train_svm, ['Healthy', 'Bankrupt'], "Support Vector Machines Train")

#test
cf_matrix_test_svm = confusion_matrix(Y_test, pred_test_svm)
print(cf_matrix_test_svm)

funcy_cf_plot(cf_matrix_test_svm, ['Healthy', 'Bankrupt'], "Support Vector Machines Test")
print("----------------------------------------------------------")

#gnb
#train
cf_matrix_train_gnb = confusion_matrix(Y_train, pred_train_gnb)
print(cf_matrix_train_gnb)

funcy_cf_plot(cf_matrix_train_gnb, ['Healthy', 'Bankrupt'], "Naive Bayes Train")

#test
cf_matrix_test_gnb = confusion_matrix(Y_test, pred_test_gnb)
print(cf_matrix_test_gnb)

funcy_cf_plot(cf_matrix_test_gnb, ['Healthy', 'Bankrupt'], "Naive Bayes Test")
print("----------------------------------------------------------")

#neigh
#train
cf_matrix_train_neigh = confusion_matrix(Y_train, pred_train_neigh)
print(cf_matrix_train_neigh)

funcy_cf_plot(cf_matrix_train_neigh, ['Healthy', 'Bankrupt'], "KNN Train")

#test
cf_matrix_test_neigh = confusion_matrix(Y_test, pred_test_neigh)
print(cf_matrix_test_neigh)

funcy_cf_plot(cf_matrix_test_neigh, ['Healthy', 'Bankrupt'], "KNN Test")
print("----------------------------------------------------------")

#7

#lr
#train
acc_train_lr = accuracy_score(Y_train,pred_train_lr )
pre_train_lr = precision_score(Y_train,pred_train_lr,\
                           average='macro', zero_division=1 )
rec_train_lr = recall_score(Y_train,pred_train_lr,\
                        average='macro' )
f1_train_lr =f1_score(Y_train,pred_train_lr,\
                  average='macro' )

#test
acc_test_lr = accuracy_score(Y_test,pred_test_lr )
pre_test_lr = precision_score(Y_test,pred_test_lr,\
                           average='macro', zero_division=1 )
rec_test_lr = recall_score(Y_test,pred_test_lr,\
                        average='macro' )
f1_test_lr =f1_score(Y_test,pred_test_lr,\
                  average='macro' )

#svm
#train
acc_train_svm = accuracy_score(Y_train,pred_train_svm )
pre_train_svm = precision_score(Y_train,pred_train_svm,\
                           average='macro', zero_division=1 )
rec_train_svm = recall_score(Y_train,pred_train_svm,\
                        average='macro' )
f1_train_svm =f1_score(Y_train,pred_train_svm,\
                  average='macro' )

#test
acc_test_svm = accuracy_score(Y_test,pred_test_svm )
pre_test_svm = precision_score(Y_test,pred_test_svm,\
                           average='macro', zero_division=1 )
rec_test_svm = recall_score(Y_test,pred_test_svm,\
                        average='macro' )
f1_test_svm =f1_score(Y_test,pred_test_svm,\
                  average='macro' )


#gnb
#train
acc_train_gnb = accuracy_score(Y_train,pred_train_gnb )
pre_train_gnb = precision_score(Y_train,pred_train_gnb,\
                           average='macro', zero_division=1 )
rec_train_gnb = recall_score(Y_train,pred_train_gnb,\
                        average='macro' )
f1_train_gnb =f1_score(Y_train,pred_train_gnb,\
                  average='macro' )

#test
acc_test_gnb = accuracy_score(Y_test,pred_test_gnb )
pre_test_gnb = precision_score(Y_test,pred_test_gnb,\
                           average='macro', zero_division=1 )
rec_test_gnb = recall_score(Y_test,pred_test_gnb,\
                        average='macro' )
f1_test_gnb =f1_score(Y_test,pred_test_gnb,\
                  average='macro' )


#neigh
#train
acc_train_neigh = accuracy_score(Y_train,pred_train_neigh )
pre_train_neigh = precision_score(Y_train,pred_train_neigh,\
                           average='macro', zero_division=1 )
rec_train_neigh = recall_score(Y_train,pred_train_neigh,\
                        average='macro' )
f1_train_neigh =f1_score(Y_train,pred_train_neigh,\
                  average='macro' )

#test
acc_test_neigh = accuracy_score(Y_test,pred_test_neigh )
pre_test_neigh = precision_score(Y_test,pred_test_neigh,\
                           average='macro', zero_division=1)
rec_test_neigh = recall_score(Y_test,pred_test_neigh,\
                        average='macro' )
f1_test_neigh =f1_score(Y_test,pred_test_neigh,\
                  average='macro' )

#8
# a. Classifier Name: το όνομα του ταξινομητή
# b. Training or test set: αναφορά αν τα αποτελέσματα της γραμμής αφορούν σε δεδομένα
# εκπαίδευσης ή αξιολόγησης
# c. Number of training samples: Αριθμός δεδομένων στο train set
# d. Number of non-healthy companies in training sample: Πόσες χρεωκοπημένες εταιρείες είχε
# το training set.
# e. TP: Αριθμός των true positive (χρεωκοπημένες εταιρεία που το μοντέλο τις έβγαλε ως
# χρεωκοπημένες).
# f. TN: Αριθμός των true negative (υγιείς εταιρείες που το μοντέλο τις έβγαλε ως υγιείς)
# g. FP: αριθμός των false positive
# h. FN: αριθμός των false negative
# i. Precision: η γνωστή μετρική
# j. Recall: η γνωστή μετρική
# k. F1 score: η γνωστή μετρική
# l. Accuracy: η γνωστή μετρική

df_output = pd.DataFrame(columns=["Classifier Name", "Training or test set","Number of training samples",\
          "Number of non-healthy companies in training sample", "TP", "TN", "FP", "FN", "Precision", "Recall", "F1 score", "Accuracy"])

#train

#lr 
df_output.loc[len(df_output)] = ["Logistic Regression" , "train", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_train_lr[1][1], cf_matrix_train_lr[0][0], cf_matrix_train_lr[0][1] , cf_matrix_train_lr[1][0],\
                                       pre_train_lr ,rec_train_lr ,f1_train_lr , acc_train_lr]

#Support Vector Machines
df_output.loc[len(df_output)] = ["Support Vector Machines" , "train", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_train_svm[1][1], cf_matrix_train_svm[0][0], cf_matrix_train_svm[0][1] , cf_matrix_train_svm[1][0],\
                                       pre_train_svm , rec_train_svm, f1_train_svm, acc_train_svm]

# Naive Bayes
df_output.loc[len(df_output)] = ["Naive Bayes" , "train", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_train_gnb[1][1], cf_matrix_train_gnb[0][0], cf_matrix_train_gnb[0][1] , cf_matrix_train_gnb[1][0],\
                                       pre_train_gnb , rec_train_gnb, f1_train_gnb, acc_train_gnb]

# KNN
df_output.loc[len(df_output)] = ["KNN" , "train", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_train_neigh[1][1], cf_matrix_train_neigh[0][0], cf_matrix_train_neigh[0][1] , cf_matrix_train_neigh[1][0],\
                                       pre_train_neigh , rec_train_neigh, f1_train_neigh, acc_train_neigh]


# test

#lr 
df_output.loc[len(df_output)] = ["Logistic Regression" , "test", len(X_train),\
                                       Y_train[(Y_train== 1)].count(), cf_matrix_test_lr[1][1], cf_matrix_test_lr[0][0], cf_matrix_test_lr[0][1] , cf_matrix_test_lr[1][0],\
                                       pre_test_lr, rec_test_lr ,f1_test_lr , acc_test_lr]

#Support Vector Machines
df_output.loc[len(df_output)] = ["Support Vector Machines" , "test", len(X_train),\
                                       Y_train[(Y_train== 1)].count() , cf_matrix_test_svm[1][1], cf_matrix_test_svm[0][0], cf_matrix_test_svm[0][1] , cf_matrix_test_svm[1][0],\
                                       pre_test_svm , rec_test_svm, f1_test_svm, acc_test_svm]

# Naive Bayes
df_output.loc[len(df_output)] = ["Naive Bayes" , "test", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_test_gnb[1][1], cf_matrix_test_gnb[0][0], cf_matrix_test_gnb[0][1] , cf_matrix_test_gnb[1][0],\
                                       pre_test_gnb , rec_test_gnb, f1_test_gnb, acc_test_gnb]

# KNN
df_output.loc[len(df_output)] = ["KNN" , "test", len(X_train) , Y_train[(Y_train== 1)].count(),\
                                       cf_matrix_test_neigh[1][1], cf_matrix_test_neigh[0][0], cf_matrix_test_neigh[0][1] , cf_matrix_test_neigh[1][0],\
                                       pre_test_neigh , rec_test_neigh, f1_test_neigh, acc_test_neigh]


print(df_output)
from google.colab import drive

drive.mount('/content/drive', force_remount=True)
path = '/content/drive/My Drive/output.csv'
with open(path, 'w', encoding = 'utf-8') as f:
  df_output.to_csv(f, index=False, encoding='utf-8')